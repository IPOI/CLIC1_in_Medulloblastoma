#Violin plot of CLIC1 expression in TCGA PANCAN dataset.
conda install seaborn
conda install scipy
conda matplotlib
conda pandas
python
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_table('CLIC1forViolin.txt',sep='\t')
sns.violinplot(x="Disease",y="CLIC1",hue="Type",data=df,scale="area",split=True,linewidth=0.85,palette={1:'#66ff33',2:'#ff0000'},inner="quartie",order=[13,16,11,7,5,30,10,32,23,15,14,17,3,12,27,8,24,22,29,25,18,6,21,4,28,2,33,31,1,20,26,19,9])
plt.show()

#Identify prognostic value of CLIC1 in each tumor. Take low grade glioma for example.
R
a<-read.delim("CLIC1forkm.txt",header=T)
install.packages("devtools")
devtools::install_github('kassambara/survminer')
aunique<-duplicated(a[,1])
aunique<-a[!aunique,]
a<-aunique
library(ggplot2)
library(ggpubr)
library(magrittr)
library(survminer)
mydata<-list()
fit<-list()
diff<-list()
cox<-list()
cut<-list()
cat<-list()
for(i in 1:33){mydata[[i]]<-subset(a,primary_disease==i)
for(i in 1:33){cut[[i]]<-surv_cutpoint(mydata[[i]],time="OS",event="EVENT",variables="CLIC1")
for(i in 1:33){cat[[i]]<-surv_categorize(cut[[i]])}
for(i in 1:33){fit[[i]]<-survfit(Surv(OS,EVENT)~CLIC1,data=cat[[i]])}
for(i in 1:33){diff[[i]]<-survdiff(Surv(OS,EVENT)~CLIC1,data=cat[[i]])}
plot(cut[[4]],"CLIC1",palette="npg")
cat4<-cat[[4]]
fit4<-survfit(Surv(OS,EVENT)~CLIC1,data=cat4)
ggsurvplot(fit4,risk.table=TRUE,pval=TRUE,conf.int=TRUE,xlim=c(0,12000),break.time.by=1500)

#The code is used for determing CLIC1 associated ion channel genes in GSE85217 dataset.
R
getwd()
data<-read.delim("GSE85217.txt",header=FALSE,row.names=FALSE)
datat<-t(data)
write.table(datat,"GES85217t.txt",col.names=FALSE,row.names=FALSE,quote=FALSE，sep="\t")
datat<-read.delim("GSE85217t.txt",header=TRUE)
library(psych)
CLIC1_correlated_genes<-corr.test(datat[3185],data1[2:20197],adjust="fdr")
r<-CLIC1_correlated_genes$r
p<-CLIC1_correlated_genes$p
CLIC1MBsta<-rbind(r,p)
CLIC1MBsta<-t(CLIC1MBsta)
colnames(CLIC1MBsta)<-c('rvalue','pvalue')
write.table(CLIC1MBsta,"CLIC1MBsta.txt",col.names=T,row.names=T,quote=FALSE,sep="\t")
CLIC1MBsta<-read.delim("CLIC1MBsta.txt",header=TRUE,row.names=FALSE)
colnames(CLIC1MBsta)<-c('Gene','rvalue','pvalue')
ionchannelgenelist<-read.delim("Ion_channel_gene_list.txt",header=T)
ionchannelgenesta<-merge(CLIC1MBsta,ionchanelgenelist,by="gene",all=FALSE)
ionchannelgenesig<-subset(ionchannelgenesta,pvalue<0.05)
ionchannelgenesig<-subset(ionchannelgenesig,rvalue>0.3 | rvalue<(-0.3))
write.table(ionchannelgenesig,"Significantly CLIC1 correlated ion channel gene.txt",col.names=TRUE,row.names=TRUE,quote=FALSE，sep="\t")
ionchannelgeneexp<-merge(ionchannlgenesig,data,by="gene",all=FALSE)
zscore<-t(scale(t(ionchannelgenexp)))
Cairo(file="heatmap_clic1_correlated_ion_channel_genes.png",type="png",units="in",bg="white",width=6,height=8,pointsize=16,dpi=300)
pheatmap(zscore,scale="row",cluster_cols=T,color=colorRampPalette(c("Green","black","red"))(50))

#The following procedure is under the environment of Anaconda.
#Areate RNASEQ enviroment.
conda create -n RNASEQ
#Activate RNASEQ enviroment.
source activate RNASEQ
#Install associated softwares.
conda install -c bioconda fastqc bbmap trim-galore hisat2 samtools stringtie
#Download reference GRCh38 genome index of hisat2.
wget ftp://ftp.ccb.jhu.edu/pub/infphilo/hisat2/data/grch38_tran.tar.gz
#Download GRCh38 GTF file.
wget ftp://ftp.ensembl.org/pub/release-90/gtf/homo_sapiens/Homo_sapiens.GRCh38.90.gtf.gz
#Data trimming of raw data.
--------RNAseq-trimming-option-1.sh---------
cd ~/CLIC1
for a in *_R1.fastq.gz;
do
a=${a%_R1.fastq.gz*};
bbduk.sh in=${a}_R1.fastq.gz in2=${a}_R2.fastq.gz out=${a}_R1.Clean.fq.gz out2=${a}_R2.Clean.fq.gz ref=~/BBMAPref/resources/adapters.fa;
done
--------------------------------------------
#Data trimming of raw data for adapter.
---------RNAseq-trimming-option-2.sh--------
cd ~/CLIC1
for a in *_R1.Clean.fq.gz;
do
a=${a%_R1.Clean.fq.gz*};
trim_galore ${a}_R1.Clean.fq.gz ${a}_R2.Clean.fq.gz --length 20 --stringency 5 --paired --fastqc;
done
--------------------------------------------
#Using HISAT2 to align the RNA sequecing reads.
----------------HISAT2.sh-------------------
cd ~/CLIC1
for a in *_R1.Clean_val_1.fq.gz;
do
a=${a%_R1.Clean_val_1.fq.gz*};
echo -------------;
echo "${a} Hisat2 initiation";
hisat2 -p 38 --dta -x ~/Reference_Genome/Hisat2_GRCh38/genome_tran -1 ${a}_R1.Clean_val_1.fq.gz -2 ${a}_R2.Clean_val_2.fq.gz -S ${a}.sam;
samtools sort -@ 38 -o ${a}.bam ${a}.sam;
rm ${a}.sam;
echo "${a} Hisat2 done!";
done
--------------------------------------------
#Use Stringtie to assembly RNA-Seq alignments into potential transcripts.
----------------Stringtie.sh----------------
cd ~/CLIC1
for a in *.bam;
do
a=${a% in *.bam};
echo -------------;
echo "{a%} stringtie initiation";
stringtie -p 38 -G ~/Refence_GTF/GTF_GRCh38/Homo_sapiens.GRCh38.90.gtf -o ./${a}.gtf -l ${a} ${a}.bam;
echo "${a} stringtie done!";
done
--------------------------------------------
#Use Stringtie to merge predicted transcripts from all libraries into a unified transcriptome.
stringtie --merge -p 38 -G ~/Refence_GTF/GTF_GRCh38/Homo_sapiens.GRCh38.90.gtf -o ./merged_gtf/merged.gtf mergelist.txt
#Use Stringtie to quantify the RNA sequencing data and generate output file for ballgown.
---------Stringtie_for_ballgown.sh----------
cd ~/CLIC1
for a in *.bam;
do
a=${a%.bam*};
echo -------------;
echo "{a%} stringtie_for_ballgown initiation";
date
stringtie -e -B -p 38 -G ./merged_gtf/merged.gtf -o ./${a}/${a}.gtf ${a}.bam;
echo "{a%} stringtie_for_ballgown done!";
done
--------------------------------------------

#We will get 15 folders containing qualified RNA-seq data of each library.
#Then we move to R and identify the differential expressed genes between each two groups.
#We take the comparison between shCLIC1 and shScr for example.
setwd("~/CLIC1/Ballgown")
library(RSkittleBrewer)
library(genefilter)
library(devtools)
library(dplyr)
library(ballgown)
pheno_data<-read.csv("shCLC1_vs_shScr_phenotype.txt")
bg<-ballgown(dataDir="shCLIC1_vs_shScr",samplePattern="CHE8695_",pData=pheno_data)
bg_filt<-subset(bg,"rowVars(texpr(bg))>1",genomesubset=TRUE)
results_genes_bg_filt<-stattest(bg_filt,feature="gene",covariate="phenotype",getFC=TRUE,meas="FPKM")
gene_names_bg_filt=data.frame(geneNames=ballgown::geneNames(bg_filt),id=ballgown::geneIDs(bg_filt))
results_genes_bg_filt<-merge(gene_names_bg_filt,results_genes_bg_filt,by="id",all=FALSE)
results_genes_bg_filt_unique<-results_genes_bg_filt[!duplicated(results_genes_bg_filt[c("geneNames")]),]
write.table(results_genes_bg_filt_unique,"statistics_shCLIC1_vs_shScr.txt",col.names = TRUE,row.names = FALSE,quote=FALSE,sep='\t')

#Gernerate the valcano plot, as shown in Figure 7a.
library(ggplot2)
library(ggthemes)
library(Cairo)
data<-read.delim("statistics_shCLIC1_vs_shScr.txt",header=T,sep='\t',na.strings = "")
data$threshold=as.factor(ifelse(data$pval<0.05 & abs(log2(data1$fc)) >= 1.0,ifelse(log2(data1$fc) > 1.0,'Up regulated','Down regulated'),'None'))
Cairo(file="volcano_shCLIC1_vs_shScr.png",type="png",units="in",bg="white",width=8,height=8,pointsize=16,dpi=300)
ggplot(data=data1, aes(x=log2(fc), y =-log10(pval), colour=threshold,fill=threshold)) +
  scale_color_manual(values=c("green3", "black","red"))+
  geom_point(alpha=0.4, size=1.6) +
  xlim(c(-4, 4)) +
  theme_bw(base_size = 16, base_family = "Times") +
  geom_vline(xintercept=c(-1.0,1.0),lty=4,col="grey",lwd=0.6)+
  geom_hline(yintercept = -log10(0.05),lty=4,col="grey",lwd=0.6)+
  theme(legend.position="right",
        panel.grid=element_blank(),
        legend.title = element_blank(),
        legend.text= element_text(face="bold", color="black",family = "Times", size=16),
        plot.title = element_text(hjust = 0.5),
        axis.text.x = element_text(face="bold", color="black", size=16),
        axis.text.y = element_text(face="bold", color="black", size=16),
        axis.title.x = element_text(face="bold", color="black", size=16),
        axis.title.y = element_text(face="bold",color="black", size=16))+
  labs(x="shCLIC1 vs shScr / log2 (fold change) ",y="-log10 (p-value)",title="Volcano plot",size=16)
dev.off()

#Enrichment analysis.The results of enrichment analysis are shown in Figure 7. We take shCLIC1 vs shScr for example.
library(clusterProfiler)
library(org.Hs.eg.db)
library(GSEABase)
SYMBOL<-read.delim("significant_shCLIC1_vs_shScr.txt",header=TRUE)
SYMBOLUP<-subset(SYMBOL,fc>2)
SYMBOLDOWN<-subset(SYMBOL,fc<0.5)
SYMBOLUP<-SYMBOLUP$geneNames
SYMBOLDOWN<-SYMBOLDOWN$geneNames
egUP<-bitr(SYMBOLUP,fromType="SYMBOL",toType="ENTREZID",OrgDb="org.Hs.eg.db")
egDOWN<-bitr(SYMBOLDOWN,fromType="SYMBOL",toType="ENTREZID",OrgDb="org.Hs.eg.db")
gmtfilekegg<-system.file("extdata","c2.cp.kegg.v6.2.symbols.gmt",package="clusterProfiler")
KEGG<-read.gmt(gmtfilekegg)
gmtfileGO<-system.file("extdata","c5.all.v6.2.symbols.gmt",package="clusterProfiler")
GO<-read.gmt(gmtfileGO)
egmtUPGO<-enricher(egUP$SYMBOL,TERM2GENE = GO)
egmtDOWNGO<-enricher(egDOWN$SYMBOL,TERM2GENE = GO)
egmtUPKEGG<-enricher(egUP$SYMBOL,TERM2GENE = GO)
egmtDOWNKEGG<-enricher(egDOWN$SYMBOL,TERM2GENE = GO)
write.table(egmtUPGO,"enrichment_GO_UP_shCLIC1.txt",col.names = TRUE,row.names = TRUE,quote=FALSE,sep="\t")
write.table(egmtDOWNGO,"enrichment_GO_DOWN_shCLIC1.txt",col.names = TRUE,row.names = TRUE,quote=FALSE,sep="\t")
write.table(egmtUPKEGG,"enrichment_KEGG_UP_shCLIC1.txt",col.names = TRUE,row.names = TRUE,quote=FALSE,sep="\t")
write.table(egmtDOWNKEGG,"enrichment_KEGG_DOWN_shCLIC1.txt",col.names = TRUE,row.names = TRUE,quote=FALSE,sep="\t")

