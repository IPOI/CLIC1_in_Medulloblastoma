#The code is used for determing CLIC1 associated ion channel genes in GSE85217 dataset.
R
getwd()
data<-read.delim("GSE85217.txt",header=FALSE,row.names=FALSE)
datat<-t(data)
write.table(datat,"GES85217t.txt",col.names=FALSE,row.names=FALSE,quote=FALSE，sep="\t")
datat<-read.delim("GSE85217t.txt",header=TRUE)
library(psych)
CLIC1_correlated_genes<-corr.test(datat[3185],data1[2:20197],adjust="fdr")
r<-CLIC1_correlated_genes$r
p<-CLIC1_correlated_genes$p
CLIC1MBsta<-rbind(r,p)
CLIC1MBsta<-t(CLIC1MBsta)
colnames(CLIC1MBsta)<-c('rvalue','pvalue')
write.table(CLIC1MBsta,"CLIC1MBsta.txt",col.names=T,row.names=T,quote=FALSE,sep="\t")
CLIC1MBsta<-read.delim("CLIC1MBsta.txt",header=TRUE,row.names=FALSE)
colnames(CLIC1MBsta)<-c('Gene','rvalue','pvalue')
ionchannelgenelist<-read.delim("Ion_channel_gene_list.txt",header=T)
ionchannelgenesta<-merge(CLIC1MBsta,ionchanelgenelist,by="gene",all=FALSE)
ionchannelgenesig<-subset(ionchannelgenesta,pvalue<0.05)
ionchannelgenesig<-subset(ionchannelgenesig,rvalue>0.3 | rvalue<(-0.3))
write.table(ionchannelgenesig,"Significantly CLIC1 correlated ion channel gene.txt",col.names=TRUE,row.names=TRUE,quote=FALSE，sep="\t")
ionchannelgeneexp<-merge(ionchannlgenesig,data,by="gene",all=FALSE)
zscore<-t(scale(t(ionchannelgenexp)))
Cairo(file="heatmap_clic1_correlated_ion_channel_genes.png",type="png",units="in",bg="white",width=6,height=8,pointsize=16,dpi=300)
pheatmap(zscore,scale="row",cluster_cols=T,color=colorRampPalette(c("Green","black","red"))(50))

#Identify CLIC1 expression in TCGA PANCAN dataset.
getwd()
a<-read.delim("TCGA-PANCCAN-RNA-seq.txt",header=FALSE)
a1<-t(a)
which(colnames(a1)=="CLIC1")
b<-a1[,31611]
c<-a1[,1]
d<-cbind(c,b)
write.table(d,"CLIC1mRNA.txt",col.names=FALSE,row.names=FALSE,quote=FALSE,sep="\t")
e<-read.delim("TCGA-PANCAN-metadata.txt",header=TRUE)
f<-merge(e,d,by="sampleID")
write.table(f,"CLIC1forexpression.txt",col.names=FALSE,row.names=FALSE,quote=FALSE,sep="\t")
mydata<-list()
for(i in 1:33){mydata[[i]]<-subset(f,primary_disease.1==i)}
result<-list()
for(i in 1:33){result[[i]]<-t.test(CLIC1~sample.type,mydata[[i]])} 
sink("result.txt")
print(result)
sink()

#Violin plot of CLIC1 expression in TCGA PANCAN dataset.
conda install seaborn
conda install scipy
conda matplotlib
conda pandas
python
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
df=pd.read_table('CLIC1forViolin.txt',sep='\t')
sns.violinplot(x="Disease",y="CLIC1",hue="Type",data=df,scale="area",split=True,linewidth=0.85,palette={1:'#66ff33',2:'#ff0000'},inner="quartie",order=[13,16,11,7,5,30,10,32,23,15,14,17,3,12,27,8,24,22,29,25,18,6,21,4,28,2,33,31,1,20,26,19,9])
plt.show()

#Identify prognostic value of CLIC1 in each tumor. The TCGA PANCAN
